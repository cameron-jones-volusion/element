{"componentChunkName":"component---src-templates-docs-js","path":"/how-to/communicate-between-blocks","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Element Documentation | Volusion","docsLocation":"https://github.com/volusion/element"}},"mdx":{"id":"39da7718-2b20-5b0e-93d4-656400fbf1fb","fields":{"id":"39da7718-2b20-5b0e-93d4-656400fbf1fb","title":"Communicate Between Blocks","slug":"/how-to/communicate-between-blocks"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Communicate Between Blocks\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometimes, it may be necessary for one block to send information to another block on the same page. In Element, blocks can communicate with each other via a pub-sub mechanism. This guide will explain how to send information between two (or more) blocks.\"), mdx(\"p\", null, \"All blocks have access to an instance of PubSubJS as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.props.pubSub\"), \".\"), mdx(\"p\", null, \"For more details on PubSubJS, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/pubsub-js\"\n  }), \"PubSubJS npm reference\"), \".\"), mdx(\"h2\", null, \"1. Identify the Blocks That Need to Communicate with Each Other\"), mdx(\"p\", null, \"The first step of setting up block communication is figuring out which block will send messages (the sender), and which blocks will receive those messages (the receivers). In Element, some pre-made blocks already send messages to each other, and you can listen for those events in your blocks. See the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/element/references/cart-events\"\n  }), \"Cart Events Reference\"), \" for more info.\"), mdx(\"p\", null, \"For this guide, you will be setting up \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"your own blocks\"), \" as senders and receivers of messages.\"), mdx(\"h2\", null, \"2. Add a Publish Action to Your Sender Block\"), mdx(\"p\", null, \"Once you have identified which block will send messages to other blocks, you need to set up a publish action in that block's code.\"), mdx(\"h3\", null, \"Add a Function to Send Your Message\"), mdx(\"p\", null, \"For this guide, we'll use the example of sending a message between blocks when a user changed an option for a product they were viewing.\"), mdx(\"p\", null, \"Send your message using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"utils.pubSub.publish()\"), \" in your block. This function takes two arguments:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A topic name (string), which can be any value you like. Your other block(s) will listen for this topic.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A data value (any type). This is the piece of data you will send to your other block(s).\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// in your block component body, add a function. Here we're doing it as an instance property because this component is a class.\\nhandleOptionChange = event => {\\n  const newOptionValue = event.target.value\\n  this.props.pubSub.publish('myEvents_PRODUCT_OPTION_CHANGED', newOptionValue)\\n}\\n\")), mdx(\"p\", null, \"Note: if your component is a stateless functional component rather than an ES6 class, you would define your function as a const rather than an instance property.\"), mdx(\"h3\", null, \"Prefix Your Topic Names!\"), mdx(\"p\", null, \"It's always a good idea to add a unique prefix to topic names that you create, to ensure that you don't collide with any other existing topic names. This way, your events will all live in their own \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"namespace\"), \". In this example, our topic is named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myEvents_PRODUCT_OPTION_CHANGED\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myEvents_\"), \" is the prefix we have chosen. You should choose something descriptive and unique.\"), mdx(\"h3\", null, \"Call Your Function at the Appropriate Time\"), mdx(\"p\", null, \"You can call your function from anywhere else in your block code. For this example, you would call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this.handleOptionChange\"), \" from the onChange event for a select element, like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"    <select onChange={this.handleOptionChange}>\\n\")), mdx(\"h2\", null, \"3. Listen for Published Messages in Your Receiver Block(s)\"), mdx(\"p\", null, \"At this point, you have a block that's sending messages, but you need to set up one or more blocks to listen for those messages.\"), mdx(\"h3\", null, \"Add a Subscription in Your Block's componentDidMount Function\"), mdx(\"p\", null, \"Locate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentDidMount\"), \" function of one of your receiver blocks. If this function doesn't exist yet, add it to your component. You may need to refactor the block to use class syntax. Then add a subscription:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"componentDidMount() {\\n    this.props.pubSub.subscribe(\\n        'myEvents_PRODUCT_OPTION_CHANGED', // must match the topic name EXACTLY\\n        this.onOptionChanged\\n    );\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"utils.pubSub.subscribe()\"), \" takes two arguments:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A topic name (string), which can be any value that a sender block is publishing.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A handler function. The message will be passed to the handler function.\")), mdx(\"h3\", null, \"Implement Your Handler Function for the Subscription\"), mdx(\"p\", null, \"Your handler function is the code that actually does something with the data received from another block. Add it to your block component as an instance property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// inside the body of your component\\nonOptionChanged = (msg, newOptionValue) => {\\n  // do something with newOptionValue. In this example we will set it to state.\\n  this.setState({ productOption: newOptionValue })\\n}\\n\")), mdx(\"p\", null, \"Repeat this process for more receiver blocks, if necessary.\"), mdx(\"h2\", null, \"Appendix: Listening for Existing Messages\"), mdx(\"p\", null, \"To set up your blocks to listen for existing messages, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/element/references/cart-events\"\n  }), \"Cart Events Reference\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-identify-the-blocks-that-need-to-communicate-with-each-other","title":"1. Identify the Blocks That Need to Communicate with Each Other"},{"url":"#2-add-a-publish-action-to-your-sender-block","title":"2. Add a Publish Action to Your Sender Block","items":[{"url":"#add-a-function-to-send-your-message","title":"Add a Function to Send Your Message"},{"url":"#prefix-your-topic-names","title":"Prefix Your Topic Names!"},{"url":"#call-your-function-at-the-appropriate-time","title":"Call Your Function at the Appropriate Time"}]},{"url":"#3-listen-for-published-messages-in-your-receiver-blocks","title":"3. Listen for Published Messages in Your Receiver Block(s)","items":[{"url":"#add-a-subscription-in-your-blocks-componentdidmount-function","title":"Add a Subscription in Your Block's componentDidMount Function"},{"url":"#implement-your-handler-function-for-the-subscription","title":"Implement Your Handler Function for the Subscription"}]},{"url":"#appendix-listening-for-existing-messages","title":"Appendix: Listening for Existing Messages"}]},"parent":{"__typename":"File","id":"4ea0eb39-52f2-5088-acd4-a99fc84fdeb9","relativePath":"how-to/communicate-between-blocks.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"id":"2d7ab765-0781-5d3a-8464-23968d98be55","fields":{"slug":"/","title":"Element Platform documentation"}}},{"node":{"id":"61a634d8-2338-5017-8e1c-509725f49d98","fields":{"slug":"/introduction","title":"What Is Element?"}}},{"node":{"id":"4ed428d0-4393-5c29-bd26-b3f6bbe2db1c","fields":{"slug":"/explanations","title":"Explanations"}}},{"node":{"id":"d1fb5fdb-dbb5-55b1-8096-e16b7d396f12","fields":{"slug":"/references","title":"Reference"}}},{"node":{"id":"370f11d8-9cd8-5fc4-9ef4-9f5871e56569","fields":{"slug":"/how-to","title":"How-to Guides"}}},{"node":{"id":"68edeef5-7429-56de-a4af-247330807814","fields":{"slug":"/tutorials","title":"Tutorials"}}},{"node":{"id":"2b667504-cf5a-5d59-9706-4c04700943e7","fields":{"slug":"/references/block-utils","title":"Block Utils"}}},{"node":{"id":"fda76190-915d-5e9e-a6a8-504480af04f3","fields":{"slug":"/references/cart-events","title":"Cart Events"}}},{"node":{"id":"1825ca75-3c29-52f1-bb1f-4eae66db4b1a","fields":{"slug":"/references/element-cli","title":"Element CLI Reference"}}},{"node":{"id":"161a1eb3-9efd-5118-bb8f-8743df907155","fields":{"slug":"/references/proptypes","title":"Proptypes"}}},{"node":{"id":"4327ecbe-7464-5164-b008-8c846d5ff0dc","fields":{"slug":"/tutorials/building-an-element-page","title":"Building An Element Page"}}},{"node":{"id":"71591094-c72e-572a-9f15-89b6b02f503b","fields":{"slug":"/references/styling-your-block-with-css","title":"Styling Your Block With CSS"}}},{"node":{"id":"b64a8e2f-4941-5823-8878-14f78880075e","fields":{"slug":"/tutorials/product-landing-page","title":"Product Landing Page"}}},{"node":{"id":"1ad53085-98e5-58cd-835b-0984cf51e675","fields":{"slug":"/tutorials/proptypes","title":"Proptypes"}}},{"node":{"id":"5a35b724-5567-5460-888c-76b5d79b891c","fields":{"slug":"/tutorials/site-designer","title":"Site Designer"}}},{"node":{"id":"4080456d-d1b4-5135-b683-2ef5b94b6992","fields":{"slug":"/how-to/add-blocks-to-template","title":"Add Blocks to Templates"}}},{"node":{"id":"a3792a5e-9d5b-5c0b-b769-0fa6845f8671","fields":{"slug":"/how-to/add-external-scripts-from-a-block","title":"Add External Scripts from a Block"}}},{"node":{"id":"5135265d-2bf0-52cf-8ca8-b6ed601db562","fields":{"slug":"/how-to/add-page-to-theme","title":"How to Add a Page to a Theme"}}},{"node":{"id":"335ed663-0bb8-5c63-aa81-b96e88465af4","fields":{"slug":"/how-to/add-page-with-uri-parameters","title":"How to Add a Page That Depends on URI Parameters"}}},{"node":{"id":"59be3233-2988-54dc-aa18-08ff48ee76cb","fields":{"slug":"/how-to/data-third-party-services","title":"Data ThirdParty Services"}}},{"node":{"id":"39da7718-2b20-5b0e-93d4-656400fbf1fb","fields":{"slug":"/how-to/communicate-between-blocks","title":"Communicate Between Blocks"}}},{"node":{"id":"5f4b2bd9-4455-54c8-83ab-6caec695705b","fields":{"slug":"/how-to/get-approved-to-develop-blocks","title":"How to Get Approved to Develop Blocks"}}},{"node":{"id":"8324d8b8-a7ed-50be-8c56-a06756bc5a65","fields":{"slug":"/how-to/data-volusion-api","title":"Data Volusion API"}}},{"node":{"id":"4faedd60-2afd-52c5-a47d-2c54adff017f","fields":{"slug":"/how-to/interact-with-the-cart","title":"How to Interact with the Cart"}}},{"node":{"id":"4a786713-7c70-5503-8c68-ac481805b0d1","fields":{"slug":"/how-to/fetch-data-fast","title":"Fetch Data Fast"}}},{"node":{"id":"8d9d9690-b662-5d15-806d-05d56e8d88df","fields":{"slug":"/how-to/preview-block-changes","title":"Preview Block Changes"}}},{"node":{"id":"a7103c51-9f05-5b3f-90a5-09539c4155f8","fields":{"slug":"/how-to/env-setup","title":"Environment Setup"}}},{"node":{"id":"f3e278ac-f916-5708-a522-2208cdc973d9","fields":{"slug":"/how-to/proptypes","title":"Element Proptypes"}}},{"node":{"id":"18d35800-0f27-5aaa-91be-af1266ab9280","fields":{"slug":"/how-to/release-a-minor-block-change","title":"Release A Minor Block Change"}}},{"node":{"id":"4c4c9558-9967-5919-91d2-7c5c25ddd5e4","fields":{"slug":"/how-to/read-page-uri-parameters-in-blocks","title":"Read Page URI Parameters In Blocks"}}},{"node":{"id":"4988cdb8-e6fd-50c9-857e-40553056b971","fields":{"slug":"/how-to/rollback-a-block-change","title":"Rollback A Block Change"}}},{"node":{"id":"e8100b80-2f8e-5603-99e1-a862665b82a2","fields":{"slug":"/how-to/reuse-a-block-across-pages","title":"Reuse A Block Across Pages"}}},{"node":{"id":"0f091299-49fb-5acc-814e-a16d0144c01d","fields":{"slug":"/how-to/release-a-new-major-block-version","title":"Release A New Major Block Version"}}},{"node":{"id":"54803fd7-9b7d-56e1-ac82-1ac41eadb05d","fields":{"slug":"/how-to/set-seo-data-from-a-block","title":"Set SEO Data From A Block"}}},{"node":{"id":"8c959a01-9f7f-58d9-9785-8ea441afeb6b","fields":{"slug":"/how-to/track-block-versions","title":"Track Block Versions"}}},{"node":{"id":"73cf6811-1158-51f4-87b3-2401552dc209","fields":{"slug":"/how-to/style-a-block-with-aphrodite","title":"Style A Block With Aphrodite"}}},{"node":{"id":"a1454030-a9e1-5d3a-8040-62253c1fbda7","fields":{"slug":"/explanations/all-the-tech-you-need","title":"All The Tech You Need"}}},{"node":{"id":"1f280d99-e424-5c54-9735-a3366b681993","fields":{"slug":"/how-to/use-react-hooks-in-a-block","title":"Use React Hooks in an Element Block"}}},{"node":{"id":"291faf2f-80cb-57fb-aad1-3437ca00f540","fields":{"slug":"/explanations/adding-a-blog","title":"Adding a Blog"}}},{"node":{"id":"5110521b-1352-50bc-950d-165884ce96a2","fields":{"slug":"/explanations/block-versions","title":"Block Versions"}}},{"node":{"id":"e58e7ec0-6076-5b54-aba8-c4af913e6096","fields":{"slug":"/explanations/keeping-your-site-fast","title":"Keeping Your Site Fast"}}},{"node":{"id":"a88e37c4-1e0e-5cde-8694-08ac4084599b","fields":{"slug":"/explanations/e-commerce-pages","title":"E-commerce Theme Pages"}}},{"node":{"id":"1629efa8-07b6-59a6-8f9c-0b16d10b56d7","fields":{"slug":"/explanations/what-is-element","title":"What Is Element?"}}},{"node":{"id":"aba6f9ec-4f17-5ec6-a0d4-8dc12bf1ab9a","fields":{"slug":"/references/sdk","title":"SDK"}}},{"node":{"id":"bfc7c8bc-d7be-5475-890e-5787c55118c4","fields":{"slug":"/explanations/element-concepts","title":"Element Concepts"}}}]}},"pageContext":{"id":"39da7718-2b20-5b0e-93d4-656400fbf1fb"}}}